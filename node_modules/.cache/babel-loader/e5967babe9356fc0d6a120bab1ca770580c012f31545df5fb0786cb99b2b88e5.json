{"ast":null,"code":"var _jsxFileName = \"/workspace/3CDISC---GRAFIC/GrowthStage/src/components/Line/Linechart.js\",\n  _s = $RefreshSig$();\n// LineChart.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LineChart() {\n  _s();\n  const [baseData, setBaseData] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchAllPages(apiToken) {\n      let currentPage = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n      try {\n        const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns?paused=false&page=${currentPage}&api_token=${apiToken}`);\n        const data = response.data.data;\n        console.log(`API Response Data (Page ${currentPage}):`, data);\n        const newData = data.map(base => ({\n          name: base.name,\n          start_time: base.start_time,\n          end_time: base.end_time,\n          asr: parseFloat(base.asr)\n        }));\n        console.log(`Formatted Data (Page ${currentPage}):`, newData);\n        setBaseData(prevData => [...prevData, ...newData]);\n\n        // Continue fetching next page if available\n        if (response.data.meta.current_page < response.data.meta.last_page) {\n          fetchAllPages(apiToken, currentPage + 1);\n        } else {\n          // All pages processed, generate chart data\n          const chartData = {\n            series: [{\n              name: 'ASR',\n              data: baseData.map(item => item.asr)\n            }],\n            options: {\n              chart: {\n                height: 350,\n                type: 'line'\n              },\n              xaxis: {\n                categories: baseData.map(item => item.name)\n              },\n              title: {\n                text: 'ASR Over Bases',\n                align: 'center'\n              }\n            }\n          };\n          console.log('Chart Data:', chartData);\n          setChartData(chartData);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Error fetching data. Please try again later.');\n        setLoading(false);\n      }\n    }\n    const apiToken = 'd0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq';\n    fetchAllPages(apiToken);\n  }, [baseData]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-3 mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"ASR Over Bases\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: chartData.options,\n      series: chartData.series,\n      type: \"line\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(LineChart, \"v6+rViRKpZDwLwcFVkC7CDpYQ+M=\");\n_c = LineChart;\nexport default LineChart;\nvar _c;\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","jsxDEV","_jsxDEV","LineChart","_s","baseData","setBaseData","chartData","setChartData","loading","setLoading","error","setError","fetchAllPages","apiToken","currentPage","arguments","length","undefined","response","get","data","console","log","newData","map","base","name","start_time","end_time","asr","parseFloat","prevData","meta","current_page","last_page","series","item","options","chart","height","type","xaxis","categories","title","text","align","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/workspace/3CDISC---GRAFIC/GrowthStage/src/components/Line/Linechart.js"],"sourcesContent":["// LineChart.js\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\n\nfunction LineChart() {\n  const [baseData, setBaseData] = useState([]);\n  const [chartData, setChartData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchAllPages(apiToken, currentPage = 1) {\n      try {\n        const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns?paused=false&page=${currentPage}&api_token=${apiToken}`);\n\n        const data = response.data.data;\n\n        console.log(`API Response Data (Page ${currentPage}):`, data);\n\n        const newData = data.map((base) => ({\n          name: base.name,\n          start_time: base.start_time,\n          end_time: base.end_time,\n          asr: parseFloat(base.asr),\n        }));\n\n        console.log(`Formatted Data (Page ${currentPage}):`, newData);\n\n        setBaseData((prevData) => [...prevData, ...newData]);\n\n        // Continue fetching next page if available\n        if (response.data.meta.current_page < response.data.meta.last_page) {\n          fetchAllPages(apiToken, currentPage + 1);\n        } else {\n          // All pages processed, generate chart data\n          const chartData = {\n            series: [\n              { name: 'ASR', data: baseData.map((item) => item.asr) },\n            ],\n            options: {\n              chart: {\n                height: 350,\n                type: 'line',\n              },\n              xaxis: {\n                categories: baseData.map((item) => item.name),\n              },\n              title: {\n                text: 'ASR Over Bases',\n                align: 'center',\n              },\n            },\n          };\n\n          console.log('Chart Data:', chartData);\n\n          setChartData(chartData);\n          setLoading(false);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error);\n        setError('Error fetching data. Please try again later.');\n        setLoading(false);\n      }\n    }\n\n    const apiToken = 'd0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq';\n    fetchAllPages(apiToken);\n  }, [baseData]);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div className='container-fluid mt-3 mb-3'>\n      <h2>ASR Over Bases</h2>\n      <Chart\n        options={chartData.options}\n        series={chartData.series}\n        type='line'\n        height={350}\n      />\n    </div>\n  );\n}\n\nexport default LineChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}