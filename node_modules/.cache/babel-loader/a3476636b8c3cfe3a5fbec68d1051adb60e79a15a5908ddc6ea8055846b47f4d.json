{"ast":null,"code":"var _jsxFileName = \"/workspace/3CDISC---GRAFIC/GrowthStage/src/components/Completion/CompletionRateChart.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CompletionRateChart() {\n  _s();\n  const [completionRateData, setCompletionRateData] = useState([]);\n  const [completionRateChartData, setCompletionRateChartData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    async function fetchCompletionRateData(page) {\n      try {\n        const apiToken = 'd0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq';\n        const response = await axios.get(`https://3c.fluxoti.com/api/v1/campaigns?paused=false&page=${page}&api_token=${apiToken}`);\n        const data = response.data.data;\n        console.log(`API Response Data for Completion Rate - Page ${page}:`, data);\n        const newCompletionRateData = data.map(campaign => ({\n          name: campaign.name,\n          completion_rate: campaign.exit_manual_mode === 30 ? 1 : 0\n        }));\n        console.log(`Formatted Completion Rate Data - Page ${page}:`, newCompletionRateData);\n        setCompletionRateData(prevData => [...prevData, ...newCompletionRateData]);\n        if (response.data.meta.pagination.current_page < response.data.meta.pagination.total_pages) {\n          // Fetch data for the next page\n          fetchCompletionRateData(response.data.meta.pagination.current_page + 1);\n        } else {\n          // All pages fetched, proceed to chart creation\n          createChart();\n        }\n      } catch (error) {\n        console.error(`Error fetching completion rate data - Page ${page}:`, error);\n        setError('Error fetching completion rate data. Please try again later.');\n        setLoading(false);\n      }\n    }\n    function createChart() {\n      const chartData = {\n        series: completionRateData.map(item => item.completion_rate),\n        options: {\n          chart: {\n            height: 350,\n            type: 'bar',\n            stacked: true\n          },\n          xaxis: {\n            categories: completionRateData.map(item => item.name)\n          },\n          title: {\n            text: 'Completion Rate of Campaigns',\n            align: 'center'\n          },\n          plotOptions: {\n            bar: {\n              horizontal: false\n            }\n          },\n          dataLabels: {\n            enabled: false\n          },\n          legend: {\n            position: 'top',\n            horizontalAlign: 'right',\n            offsetY: -20\n          }\n        }\n      };\n      console.log('Completion Rate Chart Data:', chartData);\n      setCompletionRateChartData(chartData);\n      setLoading(false);\n    }\n    fetchCompletionRateData(1);\n  }, []); // The dependency array is empty to ensure that this effect runs only once\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid mt-3 mb-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Completion Rate of Campaigns\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      options: completionRateChartData.options,\n      series: [{\n        data: completionRateChartData.series\n      }],\n      type: \"bar\",\n      height: 350\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n_s(CompletionRateChart, \"m9A2YrcMl/TlLsftIWYCXzW08+A=\");\n_c = CompletionRateChart;\nexport default CompletionRateChart;\nvar _c;\n$RefreshReg$(_c, \"CompletionRateChart\");","map":{"version":3,"names":["React","useState","useEffect","axios","Chart","jsxDEV","_jsxDEV","CompletionRateChart","_s","completionRateData","setCompletionRateData","completionRateChartData","setCompletionRateChartData","loading","setLoading","error","setError","fetchCompletionRateData","page","apiToken","response","get","data","console","log","newCompletionRateData","map","campaign","name","completion_rate","exit_manual_mode","prevData","meta","pagination","current_page","total_pages","createChart","chartData","series","item","options","chart","height","type","stacked","xaxis","categories","title","text","align","plotOptions","bar","horizontal","dataLabels","enabled","legend","position","horizontalAlign","offsetY","children","fileName","_jsxFileName","lineNumber","columnNumber","className","_c","$RefreshReg$"],"sources":["/workspace/3CDISC---GRAFIC/GrowthStage/src/components/Completion/CompletionRateChart.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Chart from 'react-apexcharts';\n\nfunction CompletionRateChart() {\n  const [completionRateData, setCompletionRateData] = useState([]);\n  const [completionRateChartData, setCompletionRateChartData] = useState({});\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchCompletionRateData(page) {\n      try {\n        const apiToken = 'd0NLCpTnvtsY1gQu7S38RyF47fOjnHknynBjGzWxCwpXOJqXaNwWDrGqFomq';\n\n        const response = await axios.get(\n          `https://3c.fluxoti.com/api/v1/campaigns?paused=false&page=${page}&api_token=${apiToken}`\n        );\n\n        const data = response.data.data;\n\n        console.log(`API Response Data for Completion Rate - Page ${page}:`, data);\n\n        const newCompletionRateData = data.map((campaign) => ({\n          name: campaign.name,\n          completion_rate: campaign.exit_manual_mode === 30 ? 1 : 0,\n        }));\n\n        console.log(`Formatted Completion Rate Data - Page ${page}:`, newCompletionRateData);\n\n        setCompletionRateData((prevData) => [...prevData, ...newCompletionRateData]);\n\n        if (response.data.meta.pagination.current_page < response.data.meta.pagination.total_pages) {\n          // Fetch data for the next page\n          fetchCompletionRateData(response.data.meta.pagination.current_page + 1);\n        } else {\n          // All pages fetched, proceed to chart creation\n          createChart();\n        }\n      } catch (error) {\n        console.error(`Error fetching completion rate data - Page ${page}:`, error);\n        setError('Error fetching completion rate data. Please try again later.');\n        setLoading(false);\n      }\n    }\n    \n\n    function createChart() {\n      const chartData = {\n        series: completionRateData.map((item) => item.completion_rate),\n        options: {\n          chart: {\n            height: 350,\n            type: 'bar',\n            stacked: true,\n          },\n          xaxis: {\n            categories: completionRateData.map((item) => item.name),\n          },\n          title: {\n            text: 'Completion Rate of Campaigns',\n            align: 'center',\n          },\n          plotOptions: {\n            bar: {\n              horizontal: false,\n            },\n          },\n          dataLabels: {\n            enabled: false,\n          },\n          legend: {\n            position: 'top',\n            horizontalAlign: 'right',\n            offsetY: -20,\n          },\n        },\n      };\n\n      console.log('Completion Rate Chart Data:', chartData);\n\n      setCompletionRateChartData(chartData);\n      setLoading(false);\n    }\n\n    fetchCompletionRateData(1);\n  }, []); // The dependency array is empty to ensure that this effect runs only once\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>{error}</p>;\n  }\n\n  return (\n    <div className='container-fluid mt-3 mb-3'>\n      <h2>Completion Rate of Campaigns</h2>\n      <Chart\n        options={completionRateChartData.options}\n        series={[{ data: completionRateChartData.series }]}\n        type='bar'\n        height={350}\n      />\n    </div>\n  );\n}\n\nexport default CompletionRateChart;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}